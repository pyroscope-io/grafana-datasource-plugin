name: CI

on:
  pull_request:
    branches:
      - main

env:
  CYPRESS_CACHE_FOLDER: cypress/cache

jobs:
  cypress:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node/
      - name: Cache Cypress Binary
        id: cache-cypress-binary
        uses: actions/cache@v2
        with:
          path: cypress/cache
          key: cypress-binary-${{ hashFiles('yarn.lock') }}
      - name: Pull dependencies
        run: yarn
      - name: Build
        run: yarn build
      - name: Run grafana server
        run: |
          docker-compose pull
          docker-compose up -d
      - name: Run tests
        run: yarn cy:ci
        env:
          CYPRESS_VIDEO: true
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  build-and-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - name: Pull dependencies
        run: yarn
      - name: Build
        run: yarn build
      - name: Sign plugin
        run: yarn sign
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }} # Requires a Grafana API key from Grafana.com.
      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5

          echo "::set-output name=plugin-id::${GRAFANA_PLUGIN_ID}"
          echo "::set-output name=plugin-version::${GRAFANA_PLUGIN_VERSION}"
          echo "::set-output name=plugin-type::${GRAFANA_PLUGIN_TYPE}"
          echo "::set-output name=archive::${GRAFANA_PLUGIN_ARTIFACT}"
          echo "::set-output name=archive-checksum::${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}"

          echo ::set-output name=github-tag::${GITHUB_REF#refs/*/}

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive-checksum }}
          echo "::set-output name=checksum::$(cat ./${{ steps.metadata.outputs.archive-checksum }} | cut -d' ' -f1)"

      # 
      # analyzers:
      #      screenshots:
      #        rules:
      #          screenshots:
      #            # TODO publish screenshots?
      #            enabled: false
      #
      #analyzers:
      #  version:
      #    enabled: false


      # A PR created by pyroscopebot (aka Release Please)
      # bumps package.json and CHANGELOG, which we then want to validate
      # If it's a user PR, don't check the version
      - uses: haya14busa/action-cond@v1
        id: ENABLE_VERSION_ANALYZER
        name: 'Enable linting version?'
        with:
          cond: ${{ github.event.pull_request.user.login }} == 'pyroscopebot'
          if_true: true
          if_false: false

      - name: Lint plugin
        run: |
          export PATH="$(go env GOPATH)/bin/:$PATH"
          envsubst < lint.config.yaml > lint.config.yaml
          git clone https://github.com/grafana/plugin-validator
          pushd ./plugin-validator/pkg/cmd/plugincheck2
          go install
          popd
          plugincheck2 -config lint.config.yaml -sourceCodeUri=. ${{ steps.metadata.outputs.archive }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

